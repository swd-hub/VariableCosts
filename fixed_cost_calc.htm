<!doctype html>
<html lang="ja">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/encoding-japanese/1.0.30/encoding.min.js"></script>

<title>損益計算書からその他固定費を計算する表</title>
<style>
body {
  font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Noto Sans JP", sans-serif;
  background: #f7fafc;
  margin: 0;
  padding: 20px;
  color: #111;
  font-size: 20px; /* 表題以外を20pxに */
}

.wrap {
  max-width: 720px;
  margin: 0 auto;
}

h1 {
  margin: 0 0 14px;
  font-size: 24px; /* 表題は元のまま */
  color: #083344;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.08); /* 軽い奥行き */
}

.card {
  background: linear-gradient(to bottom, #fff, #f9fbfd); /* グラデーションで立体感 */
  border-radius: 10px;
  padding: 16px;
  box-shadow: 0 4px 12px rgba(8,51,68,0.06);
  margin-bottom: 16px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}

.card:hover {
  transform: translateY(-3px);
  box-shadow: 0 8px 18px rgba(8,51,68,0.12); /* 浮かせる影を強調 */
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 8px 6px;
  text-align: left;
  border-bottom: 1px solid #eef2f6;
}

th {
  color: #6b7280;
  font-weight: 600;
  background: linear-gradient(to bottom, #f1f5f9, #e2e8f0); /* 見出しを立体感ある背景に */
  box-shadow: inset 0 -1px 0 rgba(0,0,0,0.05);
}

input[type=number] {
  width: 100%;
  box-sizing: border-box;
  padding: 6px;
  border: 1px solid #e6eef2;
  border-radius: 6px;
  font-size: 20px;
  box-shadow: inset 1px 1px 3px rgba(0,0,0,0.05); /* 内側影で奥行き */
  transition: box-shadow 0.2s ease, transform 0.2s ease;
}

input[type=number]:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(14,165,163,0.3), inset 1px 1px 3px rgba(0,0,0,0.05);
}

.right {
  text-align: right;
}

.summary {
  margin-top: 12px;
}

.summary-row {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 8px;
  border-radius: 6px;
  background: linear-gradient(to bottom, #f0fdfa, #ccfbf1);
  margin-bottom: 6px;
  box-shadow: 0 2px 5px rgba(0,0,0,0.05);
}

.label {
  color: #555;
}

.value {
  font-weight: 700;
  color: #0b5660;
}

button.copy-btn {
  background: linear-gradient(to bottom, #0fb7b4, #0ea5a3);
  color: #fff;
  border: none;
  padding: 4px 8px;
  border-radius: 4px;
  cursor: pointer;
  font-size: 20px;
  box-shadow: 0 3px 6px rgba(0,0,0,0.15);
  transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
}

button.copy-btn:hover {
  background: linear-gradient(to bottom, #11d1cd, #0b8f8c);
  transform: translateY(-2px);
  box-shadow: 0 5px 10px rgba(0,0,0,0.2);
}

button.copy-btn:active {
  transform: translateY(0);
  box-shadow: 0 2px 5px rgba(0,0,0,0.15); /* 押し込み感 */
}
</style>
</head>
<body>
<div class="wrap">

<div style="margin-top:20px">
  <input type="file" id="csvFile" accept=".csv">
  <button onclick="downloadCsv()">データ保存</button>
  <br><br>
</div>

  <h1>損益計算書からその他固定費を計算する表</h1>

  <div class="card">
    <table>
      <tr>
        <th>項目</th><th class="right">金額（円）</th>
      </tr>
      <tr>
        <td>収入合計</td>
        <td class="right"><input id="totalRevenue" type="number" step="1" value="0"></td>
      </tr>
      <tr>
        <td>所得（利益）</td>
        <td class="right"><input id="income" type="number" step="1" value="0"></td>
      </tr>
      <tr>
        <td>臨時の収入</td>
        <td class="right"><input id="unexpectedIncome" type="number" step="1" value="0"></td>
      </tr>
      <tr>
        <td>臨時の支出</td>
        <td class="right"><input id="unexpectedExpense" type="number" step="1" value="0"></td>
      </tr>
    </table>

    <h3 style="margin-top:16px;margin-bottom:8px;font-size:20px">面積に応じて変動する費用（変動費）の内訳</h3>
    <table id="varTable">
      <tr><td>肥料費</td><td class="right"><input type="number" step="1" value="0"></td></tr>
      <tr><td>農薬費</td><td class="right"><input type="number" step="1" value="0"></td></tr>
      <tr><td>資材費</td><td class="right"><input type="number" step="1" value="0"></td></tr>
      <tr><td>その他変動費</td><td class="right"><input type="number" step="1" value="0"></td></tr>
    </table>

    <div class="summary">
      <div class="summary-row">
        <div>
          <div class="label">変動費合計</div>
          <div id="varTotal" class="value">¥0</div>
        </div>
      </div>
      
    <h3 style="margin-top:16px;margin-bottom:8px;font-size:20px">固定費の費目</h3>
    <table id="fixedTable">
	  <tr><td>人件費</td><td class="right"><input type="number" step="1" value="0"></td></tr>
	  <tr><td>法定耐用年数による減価償却費</td><td class="right"><input type="number" step="1" value="0"></td></tr>
	  <tr><td>支払地代</td><td class="right"><input type="number" step="1" value="0"></td></tr>
　　</table>
      
      <div class="summary-row">
        <div>
          <div class="label">その他固定費（計算結果）</div>
          <div id="fixedCost" class="value">¥0</div>
        </div>
        <button class="copy-btn" onclick="copyFixedCost()">コピー</button>
      </div>
    </div>
  </div>
</div>


<script>
const fmt = n => '¥' + (Number(n)||0).toLocaleString('ja-JP');

function compute(){
  const totalRevenue = parseFloat(document.getElementById('totalRevenue').value) || 0;
  const income = parseFloat(document.getElementById('income').value) || 0;
  const unexpectedIncome = parseFloat(document.getElementById('unexpectedIncome').value) || 0;
  const unexpectedExpense = parseFloat(document.getElementById('unexpectedExpense').value) || 0;

  // 変動費合計
  let varTotal = 0;
  document.querySelectorAll('#varTable input').forEach(inp => {
    varTotal += parseFloat(inp.value) || 0;
  });

  // 固定費項目（人件費・減価償却費・地代）
  const laborCost = parseFloat(document.querySelector('#fixedTable tr:nth-child(1) input').value) || 0;
  const depreciation = parseFloat(document.querySelector('#fixedTable tr:nth-child(2) input').value) || 0;
  const landRent = parseFloat(document.querySelector('#fixedTable tr:nth-child(3) input').value) || 0;

  // その他固定費の計算式
  const otherFixedCost = totalRevenue - income - unexpectedIncome - varTotal + unexpectedExpense - laborCost - depreciation - landRent;

  document.getElementById('varTotal').textContent = fmt(varTotal);
  document.getElementById('fixedCost').textContent = fmt(otherFixedCost);
  document.getElementById('fixedCost').dataset.raw = Math.round(otherFixedCost); // コピー用に生の数値を保持
}

function copyFixedCost(){
  const rawValue = document.getElementById('fixedCost').dataset.raw || "0";
  navigator.clipboard.writeText(rawValue)
    .then(() => alert('その他固定費の数値をコピーしました'))
    .catch(() => alert('コピーに失敗しました'));
}

document.addEventListener('input', compute);
compute();

//SJIS保存
function downloadCsv() {
  const now = new Date();
  const formattedDate = now.toLocaleDateString('ja-JP').replaceAll('/', '-');
  const hours = now.getHours().toString().padStart(2, '0');
  const minutes = now.getMinutes().toString().padStart(2, '0');
  const timeString = `${hours}${minutes}`;
  const filename = `その他固定費_${formattedDate}_${timeString}.csv`;

  let csv = "項目,金額（円）\n";

  csv += `収入合計,${document.getElementById('totalRevenue').value}\n`;
  csv += `所得（利益）,${document.getElementById('income').value}\n`;
  csv += `臨時の収入,${document.getElementById('unexpectedIncome').value}\n`;
  csv += `臨時の支出,${document.getElementById('unexpectedExpense').value}\n`;

  document.querySelectorAll('#varTable tr').forEach(row => {
    const label = row.children[0].textContent;
    const value = row.children[1].querySelector('input').value;
    csv += `${label},${value}\n`;
  });

  document.querySelectorAll('#fixedTable tr').forEach(row => {
    const label = row.children[0].textContent;
    const value = row.children[1].querySelector('input').value;
    csv += `${label},${value}\n`;
  });

  csv += `その他固定費（計算結果）,${document.getElementById('fixedCost').dataset.raw || 0}\n`;

  const sjisArray = Encoding.convert(Encoding.stringToCode(csv), 'SJIS', 'UNICODE');
  const uint8Array = new Uint8Array(sjisArray);
  const blob = new Blob([uint8Array], { type: "application/octet-stream" });

  const a = document.createElement("a");
  a.href = URL.createObjectURL(blob);
  a.download = filename;
  a.click();
  URL.revokeObjectURL(a.href);
}

//読み込み
document.getElementById("csvFile").addEventListener("change", function(e) {
  const file = e.target.files[0];
  if (!file) return;

  const reader = new FileReader();
  reader.onload = function(e) {
    const codes = Encoding.convert(new Uint8Array(e.target.result), 'UNICODE', 'SJIS');
    const text = Encoding.codeToString(codes);
    const lines = text.split("\n").map(l => l.trim()).filter(l => l);

    lines.slice(1).forEach(line => {
      const [label, value] = line.split(",");
      const inputs = document.querySelectorAll("input");
      inputs.forEach(inp => {
        const parent = inp.closest("tr");
        if (parent && parent.children[0].textContent.trim() === label.trim()) {
          inp.value = value;
        }
      });
    });

    compute(); // 再計算
  };
  reader.readAsArrayBuffer(file);
});


</script>
</body>
</html>