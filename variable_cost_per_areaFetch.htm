<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8" />
  <script src="https://cdn.jsdelivr.net/npm/encoding-japanese/encoding.min.js"></script>

  <title>ステップ１：単位面積あたり変動費計算</title>
  <style>
body {
  font-family: 'Segoe UI', 'Helvetica Neue', sans-serif;
  background-color: #f7f9fc;
  color: #333;
  padding: 30px;
  line-height: 1.6;
  padding-top: 60px; /* #totalCost の高さに合わせる */
}

/* h1とボタンを横並びにするためのコンテナスタイル */
.header-container {
  display: flex;
  align-items: center; /* 縦方向の中央揃え */
  margin-bottom: 15px; /* 下部に余白を追加 */
}

h1 {
  font-size: 1.4em;
  color: #006c9c;
  margin: 0; /* デフォルトマージンをリセット */
  padding-bottom: 0px;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.1); /* タイトルに奥行き */
  flex-shrink: 0; /* h1が縮まないようにする */
}

/* ボタンを右寄せにするためのスタイル */
#openOperationStep1 {
  margin-left: auto; /* 左側のマージンを自動調整して右に寄せる */
  white-space: nowrap; /* ボタン内のテキストが改行されないようにする */
}


table {
  border-collapse: collapse;
  width: 100%;
  table-layout: fixed;
  background-color: #fff;
  box-shadow: 0 1px 3px rgba(0,0,0,0.08);
  margin-top: 20px;
  font-size: 20px;
}

th, td {
  padding: 8px 10px;
  border-bottom: 1px solid #ddd;
  text-align: right;
  word-break: break-word;
}

th {
  background: linear-gradient(to bottom, #e3edf4, #d6e2eb);
  font-weight: bold;
  border-bottom: 2px solid #ccc;
  box-shadow: inset 0 -1px 0 rgba(0,0,0,0.05); /* 内側の影で立体感 */
}


th select {
  width: 100%;
  font-size: 16px;
  padding: 4px;
  border-radius: 4px;
  border: 1px solid #ccc;
  background-color: #fff;
  text-align: right;
}

td input[type="number"] {
  width: 60px;
  padding: 4px;
  border: 1px solid #ccc;
  border-radius: 4px;
  text-align: right;
  font-size: 20px;
}

tr:hover td {
  background-color: #f4f8fc;
}

input[type="number"], input[type="text"] {
  padding: 4px;
  border: 1px solid #ccc;
  border-radius: 4px;
  text-align: right;
  box-shadow: inset 1px 1px 3px rgba(0,0,0,0.05); /* 内側影で奥行き */
}

button {
  background: linear-gradient(to bottom, #0095d9, #007bb5);
  color: #fff;
  border: none;
  padding: 8px 14px;
  margin-right: 8px;
  font-size: 0.9em;
  border-radius: 6px;
  cursor: pointer;
  transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.3s ease;
  box-shadow: 0 3px 6px rgba(0,0,0,0.15);
}

button:hover {
  background: linear-gradient(to bottom, #00a7f0, #005f8e);
  transform: translateY(-2px);
  box-shadow: 0 6px 10px rgba(0,0,0,0.2);
}

/* 上部固定バー */
#totalCost {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  background: linear-gradient(to bottom, #f7f9fc, #e3edf4);
  border-bottom: 2px solid #ccc;
  padding: 10px;
  z-index: 1000;
  font-size: 1.2em;
  display: flex;
  align-items: center;
  gap: 10px;
  box-shadow: 0 2px 6px rgba(0,0,0,0.1); /* 固定バーも浮かせる */
}

#totalCost span {
  flex-shrink: 0;
}

#totalCost button {
  font-size: 0.9em;
}

#table2 table th {
  position: sticky;
  top: 80px; /* #totalCost バーの高さ分 */
  background-color: #e3edf4;
  z-index: 500;
}


  </style>
</head>
<body>
  <div class="header-container">
    <h1>ステップ１：単位面積あたり変動費計算ツール</h1>
    <button id="openOperationStep1">基本操作</button>
  </div>

  <p>資材価格データ（品名,容量,単位,予約価格）.CSV:</p>
  <input type="file" id="file1" accept=".csv" />
  <button id="toggleTable1" style="display: none;">表を表示</button>
  <div id="table1"></div>
<br>

<p> 作物 暦（基準使用量）データ.CSV:</p>
<div id="file2-controls">
  <input type="file" id="file2" accept=".csv" />
  <button id="toggleTable2" style="display: none;">表を表示</button>
  <button id="toggleMoneyBtn" style="display: none;">金額ありのみ表示</button>
  <button id="saveTable2CsvBtn" style="display: none;">表を保存</button>
</div>

<div id="totalCost">
  <span>10アールあたり変動費：<span id="costPer10a">―</span> 円</span>
  <button id="calcFile2">計算する</button>
  <button id="copyCostBtn">コピー</button>
</div>

<div id="table2" style="display: none;"></div>

<script>
let priceData = {};
let file2OriginalName = ''; // CSV保存時のファイル名に使用

// ✅ 自動で「資材価格.csv」をfetchして file1 の代わりに読み込む
window.addEventListener('DOMContentLoaded', () => {
  fetch('資材価格.csv')
    .then(response => {
      if (!response.ok) throw new Error('CSVファイルの取得に失敗しました');
      return response.arrayBuffer();
    })
    .then(buffer => {
      // ここでSJISからUNICODE（UTF-8相当）に変換
      const unicodeArray = Encoding.convert(new Uint8Array(buffer), {
        to: 'UNICODE',
        from: 'SJIS'
      });
      const text = Encoding.codeToString(unicodeArray);

      // ★修正: 変換されたテキストを直接handleFile1Loadに渡す
      handleFile1Load(text);
    })
    .catch(err => {
      console.error(err);
      //alert('資材価格.csv の読み込みに失敗しました。ファイルが存在するか確認してください。');
            alert('ファイルの選択で読み込んでください。');
      // ファイル読み込みに失敗した場合、file1関連のUIを初期化する
      const toggleBtn = document.getElementById('toggleTable1');
      const tableDiv = document.getElementById('table1');
      if (toggleBtn) {
        toggleBtn.style.display = 'none';
        toggleBtn.textContent = '表を表示'; // もし表示されていたら戻す
      }
      if (tableDiv) {
        tableDiv.innerHTML = '';
        tableDiv.style.display = 'none';
      }
    });

  // 追加されたボタンのイベントリスナー
  const openOpStep1Btn = document.getElementById('openOperationStep1');
  if (openOpStep1Btn) {
    openOpStep1Btn.addEventListener('click', () => {
      window.open('operation-step１.htm', '_blank'); // 新しいタブで開く
    });
  }
});
  
function parseCSV(content) {
  return content
    .trim()
    .split('\n')
    .map(row => row.split(',').map(cell => cell.trim()))
    .map(row => {
      // 行末の空セルを削除（行によって列数が異なる場合への対応）
      while (row.length > 0 && row[row.length - 1] === '') row.pop();
      return row;
    })
    .filter(row => row.length > 0); // 空行をフィルタリング
}

function createTable(data) {
  const table = document.createElement('table');

  const headerRow = data[0];
  let calcColIndex = headerRow.indexOf('回数');
  if (calcColIndex === -1) {
    headerRow.push('金額');
    calcColIndex = headerRow.length - 1;
  } else {
    calcColIndex += 1;
    headerRow.splice(calcColIndex, 0, '金額');
  }

  const newHeader = [...headerRow];

  const newData = data.slice(1).map(row => {
    const newRow = [...row];
    if (newHeader.includes('金額')) {
      newRow.splice(calcColIndex, 0, '');
    } else {
      newRow.push('');
    }
    return newRow;
  });

  const finalData = [newHeader, ...newData];

  const remarkColIndex = newHeader.indexOf('備考');
  const remarkValues = remarkColIndex !== -1 ? [...new Set(
    finalData.slice(1).map(row => row[remarkColIndex]).filter(v => v)
  )].sort() : [];

  // ===============================
  // 1行目：通常のヘッダー行
  // ===============================
  const trHeader = document.createElement('tr');
  newHeader.forEach(colName => {
    const th = document.createElement('th');
    th.textContent = colName;
    trHeader.appendChild(th);
  });
  table.appendChild(trHeader);

  // ===============================
  // 2行目：フィルター用の行（備考の列だけselectを置く）
  // ===============================
  if (remarkColIndex !== -1) {
    const trFilter = document.createElement('tr');
    newHeader.forEach((colName, colIndex) => {
      const td = document.createElement('td');
      td.style.textAlign = 'center';
      if (colIndex === remarkColIndex && remarkValues.length > 0) {
        const select = document.createElement('select');
        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = '▼ 備考フィルター';
        select.appendChild(defaultOption);

        remarkValues.forEach(value => {
          const option = document.createElement('option');
          option.value = value;
          option.textContent = `▼ ${value}`;
          select.appendChild(option);
        });

        select.addEventListener('change', function () {
          const keyword = this.value;
          const allRows = table.querySelectorAll('tr');
          allRows.forEach((r, i) => {
            if (i <= 1) return; // ヘッダー行とフィルター行は飛ばす
            const cell = r.querySelectorAll('td')[remarkColIndex];
            const text = cell?.textContent?.trim() || '';
            r.style.display = keyword === '' || text === keyword ? '' : 'none';
          });
        });

        td.appendChild(select);
      }
      trFilter.appendChild(td);
    });
    table.appendChild(trFilter);
  }

  // ===============================
  // データ行
  // ===============================
  finalData.slice(1).forEach(row => {
    const tr = document.createElement('tr');

    newHeader.forEach((colName, colIndex) => {
      const cellValue = row[colIndex] ?? '';
      const td = document.createElement('td');
      td.style.textAlign = 'right';

      if (colName === '回数') {
        const input = document.createElement('input');
        input.type = 'number';
        input.min = '0';
        input.value = cellValue;
        input.style.width = '60px';
        input.style.textAlign = 'right';
        td.appendChild(input);
      } else if (colName === '１０アール量') {
        const input = document.createElement('input');
        input.type = 'number';
        input.min = '0';
        input.step = 'any';
        input.value = cellValue;
        input.style.width = '80px';
        input.style.textAlign = 'right';
        td.appendChild(input);
      } else if (colName === '金額') {
        td.textContent = '―';
      } else {
        td.textContent = cellValue;
      }

      tr.appendChild(td);
    });

    table.appendChild(tr);
  });

  return table;
}


function createTableForFile1(data) {
  const table = document.createElement('table');

  const maxCols = Math.max(...data.map(row => row.length));
  
  // ヘッダー行が存在することを確認し、費目列のインデックスを取得
  let actualCategoryIndex = -1;
  if (data.length > 0) {
    const headerRow = data[0];
    actualCategoryIndex = headerRow.indexOf('費目'); // ヘッダーに'費目'があるか確認
    if (actualCategoryIndex === -1 && headerRow.length > 0) {
        actualCategoryIndex = 0; // なければ最初の列をデフォルトとする
    }
  }

  const categoryValues = actualCategoryIndex !== -1 ? [...new Set(data.slice(1).map(row => row[actualCategoryIndex]).filter(v => v))].sort() : [];


  data.forEach((row, rowIndex) => {
    const tr = document.createElement('tr');

    for (let colIndex = 0; colIndex < maxCols; colIndex++) {
      const tag = rowIndex === 0 ? 'th' : 'td';
      const td = document.createElement(tag);
      td.style.textAlign = 'right';

      if (colIndex === actualCategoryIndex) { // 費目列は左寄せ
         td.style.textAlign = 'left';
      }

      if (rowIndex === 0 && colIndex === actualCategoryIndex && actualCategoryIndex !== -1) {
        const select = document.createElement('select');
        select.style.width = '100%';

        const defaultOption = document.createElement('option');
        defaultOption.value = '';
        defaultOption.textContent = '▼ 費目フィルター';
        select.appendChild(defaultOption);

        categoryValues.forEach(value => {
          const option = document.createElement('option');
          option.value = value;
          option.textContent = `▼ ${value}`;
          select.appendChild(option);
        });

        select.addEventListener('change', function () {
          const keyword = this.value;
          const allRows = table.querySelectorAll('tr');
          allRows.forEach((r, i) => {
            if (i === 0) return;
            const cell = r.querySelectorAll('td')[actualCategoryIndex];
            const text = cell?.textContent?.trim() || '';
            r.style.display = keyword === '' || text === keyword ? '' : 'none';
          });
        });

        td.appendChild(select);
      } else {
        td.textContent = row[colIndex] ?? '';
      }

      tr.appendChild(td);
    }

    table.appendChild(tr);
  });

  return table;
}

// ✅ DOMContentLoaded で file1 のボタンと file2 のファイル選択イベントを登録
window.addEventListener('DOMContentLoaded', () => {
  // ✅ 表1 表示切替トグルボタン登録
  const toggleTable1Btn = document.getElementById('toggleTable1');
  const table1Div = document.getElementById('table1');
  if (toggleTable1Btn && table1Div) {
    toggleTable1Btn.addEventListener('click', () => {
      const isVisible = getComputedStyle(table1Div).display !== 'none';
      table1Div.style.display = isVisible ? 'none' : 'block';
      toggleTable1Btn.textContent = isVisible ? '▶ 表を表示' : '▼ 表示しない';
    });
  } else {
    console.warn('⚠️ toggleTable1 ボタンまたは table1 div が見つかりません');
  }

  // ✅ file1ファイル選択イベント登録
  const file1Input = document.getElementById('file1');
  if (file1Input) {
    file1Input.addEventListener('change', handleFile1Load);
  } else {
    console.warn('⚠️ file1 の input が見つかりません。');
  }

  // ✅ file2ファイル選択イベント登録
  const file2Input = document.getElementById('file2');
  if (file2Input) {
    file2Input.addEventListener('change', handleFile2Load);
  } else {
    console.warn('⚠️ file2 の input が見つかりません。');
  }
});


// ★修正: handleFile1Load が文字列またはイベントオブジェクトを受け取るように変更
function handleFile1Load(eOrText) {
  let contentText = '';
  const toggleBtn = document.getElementById('toggleTable1');
  const tableDiv = document.getElementById('table1');

  if (typeof eOrText === 'string') {
    // fetchから文字列が直接渡された場合（既にデコード済み）
    contentText = eOrText;
    // そのまま処理関数を呼び出す
    processFile1Data(parseCSV(contentText), toggleBtn, tableDiv);
  } else {
    // input[type="file"]からイベントオブジェクトが渡された場合
    const file = eOrText.target.files[0];

    if (!file) {
      if (toggleBtn) toggleBtn.style.display = 'none';
      if (tableDiv) tableDiv.style.display = 'none';
      return;
    }

    const reader = new FileReader();
    reader.onload = function () {
      // FileReaderでSJISとして読み込む
      const rows = parseCSV(reader.result);
      processFile1Data(rows, toggleBtn, tableDiv);
    };
    reader.readAsText(file, 'Shift_JIS'); // ここでShift_JISとして読み込む
  }
}

// ★追加: file1データの処理ロジックを分離
function processFile1Data(rows, toggleBtn, tableDiv) {
  // ヘッダー行が存在しない場合の考慮
  if (rows.length < 1) {
    alert("資材価格ファイルに有効なデータがありません。");
    if (toggleBtn) toggleBtn.style.display = 'none';
    if (tableDiv) tableDiv.style.display = 'none';
    return;
  }

  // priceDataのクリアと再構築
  priceData = {}; // 既存のデータをクリア

  // ヘッダー行をスキップしてデータ行を処理
  rows.slice(1).forEach(row => {
    // CSVヘッダー: 費目,品名,容量,単位（こよみ表示）,予約参考価格（税込）,備考
    const name = (row[1] || '').trim();      // 品名
    const volume = parseFloat((row[2] || '').replace(/,/g, '')); // 容量
    const unit = (row[3] || '').trim();       // 単位
    const price = parseFloat((row[4] || '').replace(/,/g, ''));  // 予約参考価格

    if (name && !isNaN(price) && !isNaN(volume) && unit) {
      priceData[name] = { price, volume, unit };
    }
  });

  const table = createTableForFile1(rows);
  if (tableDiv) {
    tableDiv.innerHTML = '';
    tableDiv.appendChild(table);
    tableDiv.style.display = 'block';
  }

  if (toggleBtn) {
    toggleBtn.style.display = 'inline';
    toggleBtn.textContent = '▼ 表示しない';
  }
}


function handleFile2Load(e) {
  const file = e.target.files[0];
  const toggleTable2Btn = document.getElementById('toggleTable2');
  const calcBtn = document.getElementById('calcFile2');
  const moneyBtn = document.getElementById('toggleMoneyBtn');
  const saveBtn = document.getElementById('saveTable2CsvBtn');
  const table2Div = document.getElementById('table2');

  if (!file) {
    if (toggleTable2Btn) toggleTable2Btn.style.display = 'none';
    if (calcBtn) calcBtn.style.display = 'none';
    if (moneyBtn) moneyBtn.style.display = 'none';
    if (saveBtn) saveBtn.style.display = 'none';
    if (table2Div) table2Div.style.display = 'none';
    file2OriginalName = '';
    return;
  }

  file2OriginalName = file.name.replace(/\.csv$/i, ''); // ファイル名を保存

  const reader = new FileReader();

  reader.onload = function () {
    // handleFile2Loadはファイルinputからのみ呼び出されるため、
    // ここでSJISとして読み込むのは正しい
    const rows = parseCSV(reader.result).filter(r => r.length > 0 && r[0]);

    if (rows.length === 0) {
      alert("⚠️ file2 に有効なデータ行がありません！");
      if (toggleTable2Btn) toggleTable2Btn.style.display = 'none';
      if (calcBtn) calcBtn.style.display = 'none';
      if (moneyBtn) moneyBtn.style.display = 'none';
      if (saveBtn) saveBtn.style.display = 'none';
      if (table2Div) table2Div.style.display = 'none';
      return;
    }

    const header = rows[0];
    const body = rows.slice(1).map(row => {
      // 品名列のインデックスを確認し、存在しない場合はスキップ
      const nameIndex = header.indexOf('品名');
      const name = nameIndex !== -1 ? row[nameIndex] : undefined;

      // １０アール量、単位のインデックスも確認
      const currentUsageIndex = header.indexOf('１０アール量');
      const currentUnitIndex = header.indexOf('単位');

      // フォールバック処理のために行のコピーを作成
      const newRow = [...row];

      // 元のCSV行のインデックスに直接値を設定するのではなく、新しい行のコピーに設定する
      if (currentUsageIndex !== -1) {
          newRow[currentUsageIndex] = (newRow[currentUsageIndex] || '').trim();
      }
      if (currentUnitIndex !== -1) {
          newRow[currentUnitIndex] = (newRow[currentUnitIndex] || '').trim();
      }

      return newRow;
    });

    const table = createTable([header, ...body]);
    if (table2Div) {
      table2Div.innerHTML = '';
      table2Div.appendChild(table);
      table2Div.style.display = 'block';
    }

    // ✅ 表2トグルボタン（toggleTable2）表示＆イベント登録
    if (toggleTable2Btn) {
      toggleTable2Btn.style.display = 'inline-block';
      toggleTable2Btn.textContent = '▼ 表示しない';

      // 既存のイベントリスナーがあれば削除（重複防止）
      if (toggleTable2Btn._eventListener) {
          toggleTable2Btn.removeEventListener('click', toggleTable2Btn._eventListener);
      }

      const newToggleListener = () => {
          const table2 = document.getElementById('table2');
          const calcBtnRef = document.getElementById('calcFile2'); // calcBtnの参照を再度取得
          if (!table2) return;

          const isVisible = getComputedStyle(table2).display !== 'none';
          table2.style.display = isVisible ? 'none' : 'block';
          toggleTable2Btn.textContent = isVisible ? '▶ 表を表示' : '▼ 表示しない';

          if (calcBtnRef) {
              // テーブルが非表示になる場合は計算ボタンも非表示に
              // テーブルが表示される場合は計算ボタンも表示に
              calcBtnRef.style.display = isVisible ? 'none' : 'inline-block';
          }
      };
      toggleTable2Btn.addEventListener('click', newToggleListener);
      toggleTable2Btn._eventListener = newToggleListener; // リスナー参照を保存
    }

    // ✅ 金額合計初期化
    const costSpan = document.getElementById('costPer10a');
    if (costSpan) costSpan.textContent = '—';

    // ✅ 計算ボタン表示
    if (calcBtn) calcBtn.style.display = 'inline-block';

    // ✅ 金額トグルボタン表示＆イベント登録（安全処理）
    if (moneyBtn) {
        moneyBtn.style.display = 'inline-block';
        moneyBtn.textContent = '▶ 金額ありのみ表示';

        if (moneyBtn._eventListener) {
            moneyBtn.removeEventListener('click', moneyBtn._eventListener);
        }

        let showOnlyPriced = false;

        const moneyBtnClickHandler = () => {
            const tableEl = document.querySelector('#table2 table');
            if (!tableEl) return;

            const headers = Array.from(tableEl.querySelectorAll('th')).map(th => th.textContent.trim());
            const priceIndex = headers.indexOf('金額');
            if (priceIndex === -1) {
              console.warn('金額列が見つかりません。');
              return;
            }

            showOnlyPriced = !showOnlyPriced;

            const rows = tableEl.querySelectorAll('tr');
            rows.forEach((tr, i) => {
                if (i === 0) return; // ヘッダー行はスキップ
                const cell = tr.querySelectorAll('td')[priceIndex];
                if (!cell) { // セルがない場合もスキップ
                  tr.style.display = ''; // 隠さない
                  return;
                }
                const text = cell.textContent.trim();
                const numericValue = parseFloat(text.replace(/,/g, ''));
                const isDisplayable = numericValue > 0;

                tr.style.display = (!showOnlyPriced || isDisplayable) ? '' : 'none';
            });

            moneyBtn.textContent = showOnlyPriced ? '▼ 全て表示する' : '▶ 金額ありのみ表示';
        };

        moneyBtn.addEventListener('click', moneyBtnClickHandler);
        moneyBtn._eventListener = moneyBtnClickHandler;
    } else {
        console.warn("⚠️ toggleMoneyBtn が DOM に存在していません");
    }

    if (saveBtn) {
        saveBtn.style.display = 'inline-block';
    }
  };

  reader.readAsText(file, 'Shift_JIS');
}


document.getElementById('calcFile2').addEventListener('click', function () {
  const table = document.querySelector('#table2 table');
  if (!table) {
    alert('⚠️ 表がまだ表示されていません。');
    return;
  }

  const headers = Array.from(table.querySelector('tr').querySelectorAll('th')).map(th => th.textContent);
  const idx = {
    name: headers.indexOf('品名'),
    amountPer10a: headers.indexOf('１０アール量'),
    unit: headers.indexOf('単位'),
    count: headers.indexOf('回数'),
    price: headers.indexOf('金額')
  };

  const rows = Array.from(table.querySelectorAll('tr')).slice(1);
  let total = 0;

  rows.forEach(row => {
    const cells = row.querySelectorAll('td');
    const name = cells[idx.name]?.textContent.trim();

    const amountInput = cells[idx.amountPer10a]?.querySelector('input');
    const amountPer10a = parseFloat(amountInput?.value || 0);
    const unit = cells[idx.unit]?.textContent.trim();
    const countInput = cells[idx.count]?.querySelector('input');
    const count = parseFloat(countInput?.value || 0);
    const priceCell = cells[idx.price];

    const info = priceData[name];
    if (!info || isNaN(info.price) || isNaN(info.volume)) {
      priceCell.textContent = '―';
      return;
    }

    // 単位換算処理
    const factor = getUnitConversionFactor(unit, info.unit);
    if (factor === null) {
      priceCell.textContent = '単位不一致';
      return;
    }

    const adjustedAmount = amountPer10a * factor;
    const unitPrice = info.price / info.volume;
    const amount = unitPrice * adjustedAmount * count;

    if (isNaN(amount)) {
      priceCell.textContent = '―';
    } else if (amount === 0) {
      priceCell.textContent = '0';
    } else {
      priceCell.textContent = Math.round(amount).toLocaleString();

    }

    if (count > 0 && !isNaN(amount)) {
      total += amount;
    }
  });

  const costSpan = document.getElementById('costPer10a');
  if (costSpan) costSpan.textContent = Math.round(total).toLocaleString();
});document.getElementById('copyCostBtn')?.addEventListener('click', () => {
  const raw = document.getElementById('costPer10a')?.textContent?.trim();
  if (raw && raw !== '―') {
    const numericValue = raw.replace(/,/g, '');
    navigator.clipboard.writeText(numericValue)
      .then(() => alert('変動費の数値のみをコピーしました！'))
      .catch(() => alert('コピーに失敗しました'));
  }
});
  
document.getElementById('saveTable2CsvBtn').addEventListener('click', saveTable2SelectedToCSV);

function saveTable2SelectedToCSV() {
  const table = document.querySelector('#table2 table');
  if (!table) {
    console.error('表が見つかりません');
    alert('エラー: 表が読み込まれていません。まずファイル2を読み込んでください。');
    return;
  }

  const headers = Array.from(table.querySelectorAll('th')).map(th => th.textContent.trim());
  const idx = {
    name: headers.indexOf('品名'),
    amount: headers.indexOf('１０アール量'),
    unit: headers.indexOf('単位'),
    count: headers.indexOf('回数'),
    price: headers.indexOf('金額'),
    remark: headers.indexOf('備考') // 備考列も追加
  };

  // 保存するヘッダーを指定（備考は存在する場合のみ追加）
  const selectedHeader = ['品名', '１０アール量', '単位', '回数', '金額'];
  if (idx.remark !== -1) selectedHeader.push('備考');

  const csvRows = [selectedHeader];

  const rows = table.querySelectorAll('tr');
  rows.forEach((tr, i) => {
    // ヘッダー行とフィルター行（selectを含む行）をスキップ
    if (i === 0) return; // ヘッダー行はスキップ
    if (tr.querySelector('select')) return; // フィルター行をスキップ
    if (tr.style.display === 'none') return; // 非表示の行はスキップ

    const cells = tr.querySelectorAll('td');
    const rowData = [];

    // 各列のデータを取得
    const name = cells[idx.name]?.textContent.trim();
    const amount = cells[idx.amount]?.querySelector('input')?.value?.trim() ?? cells[idx.amount]?.textContent?.trim() ?? '';
    const unit = cells[idx.unit]?.textContent.trim();
    const count = cells[idx.count]?.querySelector('input')?.value?.trim() ?? cells[idx.count]?.textContent?.trim() ?? '';
    const priceRaw = cells[idx.price]?.querySelector('input')?.value?.trim() ?? cells[idx.price]?.textContent?.trim() ?? '';
    const remark = (idx.remark !== -1 && cells[idx.remark]) ? cells[idx.remark]?.textContent?.trim() ?? '' : '';

    // 金額列の変換: '―' を 0 に、カンマや全角カンマや空白を削除して数値文字列にする
    let price = (priceRaw ?? '').trim();
    if (price === '―' || price === '—' || price === '') {
      price = '0';
    } else {
      // 通貨記号や「円」等を取り除き、カンマや全角カンマ、スペースを除去
      price = String(price).replace(/[,，\s　]|円|円（税込）/g, '');
      // 非数値文字が残っていれば取り除く（小数点とマイナスは残す）
      price = price.replace(/[^\d.\-]/g, '');
      if (price === '') price = '0';
    }

    rowData.push(name, amount, unit, count, price);
    if (idx.remark !== -1) {
        rowData.push(remark);
    }
    csvRows.push(rowData);
  });

  // CSV 行を組み立てる
  const csv = csvRows.map(row =>
    row.map((cell, i) => {
      const headerName = selectedHeader[i] || '';
      const rawCell = String(cell ?? '');

      // 金額列は数値（カンマなし）として出力：引用符で囲まない
      if (headerName === '金額') {
        // 数値チェックおよび整形（整数にしたい場合は Math.round などをここで実行しても良い）
        const num = rawCell.replace(/[,，\s　]/g, '');
        return num === '' ? '0' : num;
      }

      // その他の列はダブルクォートをエスケープし、必要なら引用符で囲む
      const processedCell = rawCell.replace(/"/g, '""');
      if (processedCell.includes(',') || processedCell.includes('\n') || processedCell.includes('"') || /\s/.test(processedCell) || /　/.test(processedCell)) {
        return `"${processedCell}"`;
      }
      return processedCell;
    }).join(',')
  ).join('\r\n');

  const now = new Date();
  const timestamp = `${now.getFullYear()}${(now.getMonth()+1).toString().padStart(2,'0')}${now.getDate().toString().padStart(2,'0')}_${now.getHours().toString().padStart(2,'0')}${now.getMinutes().toString().padStart(2,'0')}${now.getSeconds().toString().padStart(2,'0')}`;
  const baseName = file2OriginalName || '表2';
  const filename = `${baseName}_${timestamp}.csv`;

  // SJISに変換してBlobを作成
  const sjisArray = Encoding.convert(Encoding.stringToCode(csv), {
    to: 'SJIS',
    from: 'UNICODE'
  });
  const blob = new Blob([new Uint8Array(sjisArray)], { type: 'text/csv;charset=Shift_JIS' }); // charsetも明示

  const link = document.createElement('a');
  link.href = URL.createObjectURL(blob);
  link.download = filename;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(link.href);
}

function normalizeUnit(unit) {
  if (!unit) return '';
  unit = unit.replace(/[Ａ-Ｚａ-ｚ０-９]/g, function(s) {
    return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
  });
  return unit.toUpperCase().trim();
}

function getUnitConversionFactor(fromUnit, toUnit) {
  var uFrom = normalizeUnit(fromUnit);
  var uTo = normalizeUnit(toUnit);

  if (uFrom === uTo) return 1;

  var table = {
    'L': { 'ML': 1000 },
    'ML': { 'L': 1 / 1000 },
    'KG': { 'G': 1000, 'T': 1 / 1000 },
    'G': { 'KG': 1 / 1000, 'T': 1 / 1000000 },
    'T': { 'KG': 1000, 'G': 1000000 }
  };

  return (table[uFrom] && table[uFrom][uTo]) ? table[uFrom][uTo] : null;
}  

  </script>
</body>

</html>