<!DOCTYPE html>
<html lang="ja">
<head>
<meta charset="UTF-8">
<title>予想使用可能年数による固定資産台帳</title>
<style>
/* bodyの初期設定 - 固定ヘッダー分のパディングはJSで追加 */
body {
  font-family: 'Segoe UI', sans-serif;
  background-color: #f4f6f8;
  color: #333;
  margin: 0 30px 30px 30px; /* 左右と下は30pxマージンを維持 */
  padding-top: 0; /* JSで動的に設定される。初期値は0。 */
}

/* 固定される最上部エリアのスタイル */
#top-fixed-area {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  /* bodyの左右マージン30pxを考慮し、このエリアにも左右に30pxのパディングを設ける */
  padding: 20px 30px 10px 30px; /* 上20px, 左右30px, 下10px */
  background-color: #f4f6f8; /* bodyと同じ背景色 */
  box-shadow: 0 2px 8px rgba(0,0,0,0.15); /* 下に影をつけて浮き上がらせる */
  z-index: 1000; /* 最前面に表示 */
}

/* 固定エリア内のh1とcontrolのマージン調整 */
#top-fixed-area h1 {
  margin-top: 0; /* 親のpaddingでスペースを確保するため */
  margin-bottom: 15px; /* controlとの間隔 */
}
#top-fixed-area #control {
  margin-bottom: 0; /* 親のpaddingでスペースを確保するため */
}

h1 {
  font-size: 28px;
  color: #2c3e50;
  text-shadow: 1px 1px 2px rgba(0,0,0,0.08);
}

/* Table Styles */
table {
  table-layout: fixed;
  border-collapse: collapse;
  width: 100%;
  margin-bottom: 40px;
  background: linear-gradient(to bottom, #ffffff, #f8fafc);
  box-shadow: 0 2px 8px rgba(0,0,0,0.08);
  border-radius: 6px;
  transition: transform 0.2s ease, box-shadow 0.2s ease;
}
table:hover {
  transform: translateY(-3px);
  box-shadow: 0 6px 16px rgba(0,0,0,0.15);
}
th, td {
  border: 1px solid #ddd;
  padding: 8px 10px;
  text-align: right;
  font-size: 20px;
}
th:first-child, td:first-child {
  background: linear-gradient(to bottom, #f5f8fa, #e7ecef);
  text-align: left;
  font-weight: 600;
  width: 200px;
}

/* テーブルヘッダー (<thead>) 全体の固定スタイル */
thead {
  position: sticky; /* THEAD全体をスクロール時に固定 */
  top: 0; /* JavaScriptで動的に設定される */
  z-index: 998; /* top-fixed-area (1000) より下、テーブル内容より上 */
  /* スクロール時に背景が透けないように背景色を確保 */
  background: linear-gradient(to bottom, #f0f3f5, #dfe4e7);
  box-shadow: 0 1px 4px rgba(0,0,0,0.1); /* わずかな影で区別しやすく */
}

/* TH内のスタイル（theadからsticky属性は削除） */
thead th {
  font-weight: 600;
  text-align: center;
  box-shadow: inset 0 -1px 0 rgba(0,0,0,0.05); /* セルごとの影 */
}

tbody tr:hover {
  background: linear-gradient(to bottom, #f9fcff, #eef6ff);
}
select {
  font-size: 20px;
}
input[type="number"], input[type="text"] {
  width: 200px;
  padding: 4px 6px;
  border: 1px solid #ccc;
  border-radius: 4px;
  font-size: 20px;
  text-align: right;
  box-shadow: inset 1px 1px 3px rgba(0,0,0,0.05);
  transition: box-shadow 0.2s ease, transform 0.2s ease;
}
input[type="date"] {
  width: auto;
  font-size: 18px;
  padding: 4px 6px;
}
input:focus, select:focus {
  outline: none;
  box-shadow: 0 0 0 2px rgba(52,152,219,0.3), inset 1px 1px 3px rgba(0,0,0,0.05);
}
#control button {
  padding: 6px 12px;
  background: linear-gradient(to bottom, #4daef0, #3498db);
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 18px;
  margin-right: 10px;
  box-shadow: 0 3px 6px rgba(0,0,0,0.15);
  transition: transform 0.2s ease, box-shadow 0.2s ease, background 0.2s ease;
}
#control button:hover {
  background: linear-gradient(to bottom, #5eb9f5, #2980b9);
  transform: translateY(-2px);
  box-shadow: 0 5px 10px rgba(0,0,0,0.2);
}
#control button:active {
  transform: translateY(0);
  box-shadow: 0 2px 5px rgba(0,0,0,0.15);
}
#filterCategory{
 font-size:20px;
}
</style>
</head>
<body>

<!-- 固定される最上部エリア -->
<div id="top-fixed-area">
  <h1>予想使用可能年数による固定資産台帳</h1>

  <div id="control">
    <input type="file" id="csvFile" accept=".csv">
    <button id="downloadCsv">データファイル保存</button>
    期末日: <input type="date" id="periodEnd">
    <br><br>
    <button id="calcBtn">計算</button>
    減価償却費合計: <span id="totalDep">0</span> 円
    <button id="copyTotal">コピー</button>
    <br><br>
    <button id="addRow">行追加</button>
  </div>
</div>
<!-- /固定される最上部エリア -->

<table id="assetTable">
  <thead>
    <tr>
      <th>
        資産区分<br>
        <select id="filterCategory">
          <option value="">全て</option>
          <option value="機械">機械</option>
          <option value="施設">施設</option>
          <option value="建物">建物</option>
          <option value="車両">車両</option>
          <option value="生物">生物</option>
        </select>
      </th>
      <th>名称</th>
      <th>取得年月日</th>
      <th>取得価額</th>
      <th>予想使用可能年数</th>
      <th>減価償却費</th>
      <th>備考</th>
    </tr>
  </thead>
  <tbody></tbody>
</table>

<!-- SJISエンコードのためのライブラリを読み込みます -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/iconv-lite-umd/0.6.5/iconv-lite-umd.min.js"></script>

<script>
let assets = [];

const tableBody = document.querySelector("#assetTable tbody");
const periodEndInput = document.getElementById("periodEnd");
const totalDepSpan = document.getElementById("totalDep");
const filterSelect = document.getElementById("filterCategory");

// 固定ヘッダーの高さに基づいてレイアウトを調整する関数
function adjustLayout() {
  const topFixedArea = document.getElementById("top-fixed-area");
  if (!topFixedArea) return;
  const topFixedAreaHeight = topFixedArea.offsetHeight;

  document.body.style.paddingTop = `${topFixedAreaHeight + 30}px`;

  const thead = document.querySelector("#assetTable thead");
  if (thead) {
    thead.style.top = `${topFixedAreaHeight}px`;
  }
}

// ページのロード時とウィンドウのリサイズ時にレイアウト調整を実行
window.addEventListener("load", adjustLayout);
window.addEventListener("resize", adjustLayout);

function renderTable() {
  tableBody.innerHTML = "";
  const filterCat = filterSelect.value;

  assets.forEach((asset) => {
    if (filterCat && asset.category !== filterCat) return;

    const tr = document.createElement("tr");

    // 資産区分
    const tdCat = document.createElement("td");
    const selCat = document.createElement("select");
    ["機械","施設","建物","車両","生物"].forEach(cat => {
      const opt = document.createElement("option");
      opt.value = cat;
      opt.textContent = cat;
      if (asset.category === cat) opt.selected = true;
      selCat.appendChild(opt);
    });
    selCat.addEventListener("change", () => { asset.category = selCat.value; });
    tdCat.appendChild(selCat);
    tr.appendChild(tdCat);

    // 名称
    const tdName = document.createElement("td");
    const inpName = document.createElement("input");
    inpName.type = "text";
    inpName.value = asset.name || "";
    inpName.addEventListener("input", () => { asset.name = inpName.value; });
    tdName.appendChild(inpName);
    tr.appendChild(tdName);

    // 取得年月日
    const tdDate = document.createElement("td");
    const inpDate = document.createElement("input");
    inpDate.type = "date";
    inpDate.value = asset.acqDate || "";
    inpDate.addEventListener("change", () => { asset.acqDate = inpDate.value; });
    tdDate.appendChild(inpDate);
    tr.appendChild(tdDate);

    // 取得価額
    const tdPrice = document.createElement("td");
    const inpPrice = document.createElement("input");
    inpPrice.type = "number";
    inpPrice.min = 0;
    inpPrice.value = asset.price || "";
    inpPrice.addEventListener("input", () => { asset.price = parseInt(inpPrice.value) || 0; });
    tdPrice.appendChild(inpPrice);
    tr.appendChild(tdPrice);

    // 使用可能年数
    const tdYears = document.createElement("td");
    const inpYears = document.createElement("input");
    inpYears.type = "number";
    inpYears.min = 1;
    inpYears.value = asset.years || "";
    inpYears.addEventListener("input", () => { asset.years = parseInt(inpYears.value) || 0; });
    tdYears.appendChild(inpYears);
    tr.appendChild(tdYears);

    // 減価償却費
    const tdDep = document.createElement("td");
    tdDep.textContent = asset.dep != null ? asset.dep.toLocaleString() : "";
    tr.appendChild(tdDep);

    // 備考
    const tdNote = document.createElement("td");
    const inpNote = document.createElement("input");
    inpNote.type = "text";
    inpNote.value = asset.note || "";
    inpNote.addEventListener("input", () => { asset.note = inpNote.value; });
    tdNote.appendChild(inpNote);
    tr.appendChild(tdNote);

    tableBody.appendChild(tr);
  });
}

function calcDep(asset) {
  if (!asset.acqDate || !asset.years || !asset.price) return 0;
  const end = periodEndInput.value ? new Date(periodEndInput.value) : null;
  if (!end) return 0;
  const acqDate = new Date(asset.acqDate);
  const endYear = acqDate.getFullYear() + asset.years;
  const depreciation = Math.floor(asset.price / asset.years);
  if (end.getFullYear() >= endYear) return 0;
  return depreciation;
}

document.getElementById("calcBtn").addEventListener("click", () => {
  let totalDep = 0;
  assets.forEach(a => {
    a.dep = calcDep(a);
    totalDep += a.dep;
  });
  totalDepSpan.textContent = totalDep.toLocaleString();
  renderTable();
});

document.getElementById("addRow").addEventListener("click", () => {
  assets.push({category:"機械", name:"", acqDate:"", price:0, years:0, note:"", dep:null});
  renderTable();
});

filterSelect.addEventListener("change", renderTable);

document.getElementById("copyTotal").addEventListener("click", () => {
  navigator.clipboard.writeText(totalDepSpan.textContent.replace(/,/g,""));
  alert("減価償却費合計をコピーしました");
});

document.getElementById("csvFile").addEventListener("change", function(e) {
  const file = e.target.files[0];
  if (!file) return;
  const reader = new FileReader();
  reader.onload = function(e) {
    const lines = e.target.result.split("\n").map(l => l.trim()).filter(l => l);
    assets = lines.slice(1).map(line => {
      const [category,name,acqDate,price,years,dep,note] = line.split(",");
      return {category, name, acqDate, price: parseInt(price) || 0, years: parseInt(years) || 0, dep: parseInt(dep) || null, note};
    });
    renderTable();
  };
  // CSVファイルをUTF-8として読み込むことを明示
  reader.readAsText(file, "UTF-8");
});

document.getElementById("downloadCsv").addEventListener("click", () => {
  let csv = "資産区分,名称,取得年月日,取得価額,予想使用可能年数,減価償却費,備考\n";
  assets.forEach(a => {
    csv += [a.category, a.name, a.acqDate, a.price, a.years, a.dep || 0, a.note].join(",") + "\n";
  });

  // ========== ここからSJISエンコードのための修正 ==========
  // iconv-lite がグローバル変数 'iconv' として利用可能であることを前提
  if (typeof iconv === 'undefined') {
    alert("SJISエンコードのためのライブラリが読み込まれていません。インターネット接続を確認してください。UTF-8でダウンロードします。");
    // SJISエンコードができない場合はUTF-8でダウンロードするフォールバック
    const utf8Blob = new Blob([csv], {type: "text/csv;charset=utf-8"});
    const utf8Url = URL.createObjectURL(utf8Blob);
    const periodEndValue = periodEndInput.value || "未設定";
    const now = new Date();
    const hours = now.getHours().toString().padStart(2, '0');
    const minutes = now.getMinutes().toString().padStart(2, '0');
    const timeString = `${hours}${minutes}`;
    const filename = `予想使用可能年数の固定資産台帳_${periodEndValue}_${timeString}_UTF8.csv`; // UTF8と明示
    const a = document.createElement("a");
    a.href = utf8Url;
    a.download = filename;
    a.click();
    URL.revokeObjectURL(utf8Url);
    return;
  }

  // UTF-8文字列をShift_JISのUint8Arrayに変換
  const sjisBytes = iconv.encode(csv, 'Shift_JIS');

  // Blobを作成。MIMEタイプにcharset=Shift_JISを指定することが重要
  const blob = new Blob([sjisBytes], {type: "text/csv;charset=Shift_JIS"});
  const url = URL.createObjectURL(blob);
  // ========== SJISエンコードのための修正ここまで ==========

  // 期末日の値を取得（未設定の場合は「未設定」を使用）
  const periodEndValue = periodEndInput.value || "未設定";

  // 現在の時刻（時分）を取得し、フォーマット
  const now = new Date();
  const hours = now.getHours().toString().padStart(2, '0');
  const minutes = now.getMinutes().toString().padStart(2, '0');
  const timeString = `${hours}${minutes}`;

  // ファイル名を構築
  const filename = `予想使用可能年数の固定資産台帳_${periodEndValue}_${timeString}.csv`;

  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  a.click();
  URL.revokeObjectURL(url);
});

// 初期表示
renderTable();
</script>
</body>
</html>